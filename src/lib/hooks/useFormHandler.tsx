import { useCallback } from 'react';
import { useFormDispatch } from './useFormDispatch';
import { FormAction, FormFieldMeta } from '../types/formTypes';

/**
 * `useFormHandler` is a custom hook that returns `handleChange`, `handleBlur`, `resetForm`, and
 * `setAndShowError` callback functions to manage form state updates and error handling.
 *
 * @template TForm - Type representing the form state, describing the forms and their types.
 *
 * @returns An object containing four callback functions: `handleChange`, `handleBlur`, `resetForm` and `setAndShowError`.
 */
export const useFormHandler = <TForm,>() => {
  // Retrieve the form dispatch function from the FormContext
  const dispatch = useFormDispatch<TForm>();

  // `resetForm` resets the form state to its initial state.
  const resetForm = useCallback(() => {
    dispatch({ type: 'RESET_FORM' });
  }, [dispatch]);

  // `setAndShowError` sets the error message for a specific field and toggles error visibility.
  const setAndShowError = useCallback(
    <TField extends keyof TForm, TKey extends keyof TForm[TField]>(
      formKey: TField,
      fieldKey: TKey,
      errorMessage?: string,
    ) => {
      dispatch({
        type: 'SET_FORM_META_FIELD_VALUE',
        formKey,
        fieldKey,
        fieldValue: {
          errorMessage,
          showError: !!errorMessage,
        } as Partial<FormFieldMeta<TForm[keyof TForm]>>,
      } as FormAction<TForm, TField, TKey>);
    },
    [dispatch],
  );

  /**
   * `handleChange` updates the form state by setting the field's value, touched status,
   * and error message, if applicable.
   *
   * @template TValue - The type of the field value.
   *
   * @param formKey - The form name.
   * @param fieldKey - The field to be updated.
   * @param fieldValue - The new value of the form field.
   * @param errorMessage - The error message generated by the validation function (if any).
   */
  const handleChange = useCallback(
    <TField extends keyof TForm, TKey extends keyof TForm[TField]>(
      formKey: TField,
      fieldKey: TKey,
      fieldValue: TForm[TField][TKey],
      errorMessage?: string,
    ) => {
      // Update the form value
      dispatch({
        type: 'SET_FORM_FIELD_VALUE',
        formKey,
        fieldKey,
        fieldValue,
      } as FormAction<TForm, TField, TKey>);

      // Update the touched status
      dispatch({
        type: 'SET_FORM_META_FIELD_VALUE',
        formKey,
        fieldKey,
        fieldValue: {
          touched: true,
        } as Partial<FormFieldMeta<TForm[keyof TForm]>>,
      } as FormAction<TForm, TField, TKey>);

      // Set error message and visibility
      setAndShowError(formKey, fieldKey, errorMessage);
    },
    [dispatch, setAndShowError],
  );

  /**
   * `handleBlur` sets the error message and visibility for a form field when it loses focus.
   *
   * @param formKey - The form name.
   * @param fieldKey - The field that lost focus.
   * @param errorMessage - The error message generated by the validation function (if any).
   */
  const handleBlur = useCallback(
    <TField extends keyof TForm, TKey extends keyof TForm[TField]>(
      formKey: TField,
      fieldKey: TKey,
      errorMessage?: string,
    ) => {
      setAndShowError(formKey, fieldKey, errorMessage);
    },
    [setAndShowError],
  );

  // Return the `handleChange`, `handleBlur`, `setAndShowError` and `resetForm` callback functions
  return { handleChange, handleBlur, setAndShowError, resetForm };
};
